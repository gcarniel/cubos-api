// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String @id @default(cuid())
  name         String
  email        String @unique
  passwordHash String @map("password_hash")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  movies    Movie[]

  @@map("users")
}

model Movie {
  id            String   @id @default(cuid())
  title         String
  originalTitle String   @map("original_title")
  duration      Int
  budget        Int
  revenue       Int
  profit        Int
  sinopsis      String
  language      String
  releaseDate   DateTime @map("release_date")
  popularity    Int
  voteAverage   Int      @map("vote_average")
  voteCount     Int      @map("vote_count")
  posterUrl     String   @map("poster_url")
  coverUrl      String?  @map("cover_url")
  trailerUrl    String   @map("trailer_url")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  movieGenres MovieGenre[]

  @@map("movies")
}

model Genre {
  id          String       @id @default(cuid())
  name        String
  movieGenres MovieGenre[]

  @@map("genres")
}

model MovieGenre {
  movieId String
  genreId String
  movie   Movie  @relation(fields: [movieId], references: [id])
  genre   Genre  @relation(fields: [genreId], references: [id], onDelete: Cascade)

  @@id([movieId, genreId])
}

model Token {
  id        String   @id @default(cuid())
  userId    String
  token     String
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@map("tokens")
}
